;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top : 
  module Alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip AluControl : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, Branch : UInt<1>, out : SInt<32>}
    
    node _T_16 = eq(io.AluControl, UInt<1>("h00")) @[Alu.scala 15:29]
    when _T_16 : @[Alu.scala 15:44]
      node _T_17 = add(io.in1, io.in2) @[Alu.scala 15:62]
      node _T_18 = tail(_T_17, 1) @[Alu.scala 15:62]
      node _T_19 = asSInt(_T_18) @[Alu.scala 15:62]
      io.out <= _T_19 @[Alu.scala 15:52]
      skip @[Alu.scala 15:44]
    else : @[Alu.scala 17:49]
      node _T_21 = eq(io.AluControl, UInt<1>("h01")) @[Alu.scala 17:34]
      when _T_21 : @[Alu.scala 17:49]
        node _T_22 = bits(io.in2, 4, 0) @[Alu.scala 17:76]
        node _T_23 = dshl(io.in1, _T_22) @[Alu.scala 17:67]
        io.out <= _T_23 @[Alu.scala 17:57]
        skip @[Alu.scala 17:49]
      else : @[Alu.scala 19:49]
        node _T_25 = eq(io.AluControl, UInt<3>("h04")) @[Alu.scala 19:34]
        when _T_25 : @[Alu.scala 19:49]
          node _T_26 = xor(io.in1, io.in2) @[Alu.scala 19:67]
          node _T_27 = asSInt(_T_26) @[Alu.scala 19:67]
          io.out <= _T_27 @[Alu.scala 19:57]
          skip @[Alu.scala 19:49]
        else : @[Alu.scala 21:81]
          node _T_29 = eq(io.AluControl, UInt<3>("h05")) @[Alu.scala 21:34]
          node _T_31 = eq(io.AluControl, UInt<4>("h0d")) @[Alu.scala 21:66]
          node _T_32 = or(_T_29, _T_31) @[Alu.scala 21:49]
          when _T_32 : @[Alu.scala 21:81]
            node _T_33 = bits(io.in2, 4, 0) @[Alu.scala 21:108]
            node _T_34 = dshr(io.in1, _T_33) @[Alu.scala 21:99]
            io.out <= _T_34 @[Alu.scala 21:89]
            skip @[Alu.scala 21:81]
          else : @[Alu.scala 23:49]
            node _T_36 = eq(io.AluControl, UInt<3>("h06")) @[Alu.scala 23:34]
            when _T_36 : @[Alu.scala 23:49]
              node _T_37 = or(io.in1, io.in2) @[Alu.scala 23:67]
              node _T_38 = asSInt(_T_37) @[Alu.scala 23:67]
              io.out <= _T_38 @[Alu.scala 23:57]
              skip @[Alu.scala 23:49]
            else : @[Alu.scala 25:49]
              node _T_40 = eq(io.AluControl, UInt<3>("h07")) @[Alu.scala 25:34]
              when _T_40 : @[Alu.scala 25:49]
                node _T_41 = and(io.in1, io.in2) @[Alu.scala 25:67]
                node _T_42 = asSInt(_T_41) @[Alu.scala 25:67]
                io.out <= _T_42 @[Alu.scala 25:57]
                skip @[Alu.scala 25:49]
              else : @[Alu.scala 27:49]
                node _T_44 = eq(io.AluControl, UInt<4>("h08")) @[Alu.scala 27:34]
                when _T_44 : @[Alu.scala 27:49]
                  node _T_45 = sub(io.in1, io.in2) @[Alu.scala 27:67]
                  node _T_46 = tail(_T_45, 1) @[Alu.scala 27:67]
                  node _T_47 = asSInt(_T_46) @[Alu.scala 27:67]
                  io.out <= _T_47 @[Alu.scala 27:57]
                  skip @[Alu.scala 27:49]
                else : @[Alu.scala 29:49]
                  node _T_49 = eq(io.AluControl, UInt<5>("h01f")) @[Alu.scala 29:34]
                  when _T_49 : @[Alu.scala 29:49]
                    io.out <= io.in1 @[Alu.scala 29:57]
                    skip @[Alu.scala 29:49]
                  else : @[Alu.scala 31:49]
                    node _T_51 = eq(io.AluControl, UInt<5>("h015")) @[Alu.scala 31:34]
                    when _T_51 : @[Alu.scala 31:49]
                      node _T_52 = geq(io.in1, io.in2) @[Alu.scala 32:30]
                      when _T_52 : @[Alu.scala 32:40]
                        io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 32:48]
                        skip @[Alu.scala 32:40]
                      else : @[Alu.scala 33:28]
                        io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 33:36]
                        skip @[Alu.scala 33:28]
                      skip @[Alu.scala 31:49]
                    else : @[Alu.scala 35:49]
                      node _T_56 = eq(io.AluControl, UInt<5>("h017")) @[Alu.scala 35:34]
                      when _T_56 : @[Alu.scala 35:49]
                        node _T_57 = asUInt(io.in1) @[Alu.scala 36:30]
                        node _T_58 = asUInt(io.in2) @[Alu.scala 36:47]
                        node _T_59 = geq(_T_57, _T_58) @[Alu.scala 36:37]
                        when _T_59 : @[Alu.scala 36:54]
                          io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 36:62]
                          skip @[Alu.scala 36:54]
                        else : @[Alu.scala 37:28]
                          io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 37:36]
                          skip @[Alu.scala 37:28]
                        skip @[Alu.scala 35:49]
                      else : @[Alu.scala 39:81]
                        node _T_63 = eq(io.AluControl, UInt<2>("h03")) @[Alu.scala 39:34]
                        node _T_65 = eq(io.AluControl, UInt<5>("h016")) @[Alu.scala 39:66]
                        node _T_66 = or(_T_63, _T_65) @[Alu.scala 39:49]
                        when _T_66 : @[Alu.scala 39:81]
                          node _T_67 = asUInt(io.in1) @[Alu.scala 40:30]
                          node _T_68 = asUInt(io.in2) @[Alu.scala 40:46]
                          node _T_69 = lt(_T_67, _T_68) @[Alu.scala 40:37]
                          when _T_69 : @[Alu.scala 40:53]
                            io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 40:61]
                            skip @[Alu.scala 40:53]
                          else : @[Alu.scala 41:28]
                            io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 41:36]
                            skip @[Alu.scala 41:28]
                          skip @[Alu.scala 39:81]
                        else : @[Alu.scala 43:49]
                          node _T_73 = eq(io.AluControl, UInt<5>("h010")) @[Alu.scala 43:34]
                          when _T_73 : @[Alu.scala 43:49]
                            node _T_74 = eq(io.in1, io.in2) @[Alu.scala 44:30]
                            when _T_74 : @[Alu.scala 44:41]
                              io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 44:49]
                              skip @[Alu.scala 44:41]
                            else : @[Alu.scala 45:28]
                              io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 45:36]
                              skip @[Alu.scala 45:28]
                            skip @[Alu.scala 43:49]
                          else : @[Alu.scala 47:81]
                            node _T_78 = eq(io.AluControl, UInt<2>("h02")) @[Alu.scala 47:34]
                            node _T_80 = eq(io.AluControl, UInt<5>("h014")) @[Alu.scala 47:66]
                            node _T_81 = or(_T_78, _T_80) @[Alu.scala 47:49]
                            when _T_81 : @[Alu.scala 47:81]
                              node _T_82 = lt(io.in1, io.in2) @[Alu.scala 48:30]
                              when _T_82 : @[Alu.scala 48:39]
                                io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 48:47]
                                skip @[Alu.scala 48:39]
                              else : @[Alu.scala 49:28]
                                io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 49:36]
                                skip @[Alu.scala 49:28]
                              skip @[Alu.scala 47:81]
                            else : @[Alu.scala 51:49]
                              node _T_86 = eq(io.AluControl, UInt<5>("h011")) @[Alu.scala 51:34]
                              when _T_86 : @[Alu.scala 51:49]
                                node _T_87 = neq(io.in1, io.in2) @[Alu.scala 52:30]
                                when _T_87 : @[Alu.scala 52:41]
                                  io.out <= asSInt(UInt<2>("h01")) @[Alu.scala 52:49]
                                  skip @[Alu.scala 52:41]
                                else : @[Alu.scala 53:28]
                                  io.out <= asSInt(UInt<1>("h00")) @[Alu.scala 53:36]
                                  skip @[Alu.scala 53:28]
                                skip @[Alu.scala 51:49]
                              else : @[Alu.scala 54:20]
                                io.out is invalid @[Alu.scala 54:28]
                                skip @[Alu.scala 54:20]
    node _T_91 = eq(io.out, asSInt(UInt<2>("h01"))) @[Alu.scala 57:22]
    node _T_92 = bits(io.AluControl, 4, 3) @[Alu.scala 57:46]
    node _T_94 = eq(_T_92, UInt<2>("h02")) @[Alu.scala 57:52]
    node _T_95 = and(_T_91, _T_94) @[Alu.scala 57:30]
    when _T_95 : @[Alu.scala 57:64]
      io.Branch <= UInt<1>("h01") @[Alu.scala 57:75]
      skip @[Alu.scala 57:64]
    else : @[Alu.scala 58:20]
      io.Branch <= UInt<1>("h00") @[Alu.scala 58:31]
      skip @[Alu.scala 58:20]
    
  module InstTypeDeco : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, R : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, I : UInt<1>, Jal : UInt<1>, Jalr : UInt<1>, Lui : UInt<1>}
    
    node _T_24 = eq(io.opcode, UInt<6>("h033")) @[InstTypeDeco.scala 18:25]
    when _T_24 : @[InstTypeDeco.scala 18:37]
      io.R <= UInt<1>("h01") @[InstTypeDeco.scala 19:22]
      io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 20:25]
      io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 21:26]
      io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 22:27]
      io.I <= UInt<1>("h00") @[InstTypeDeco.scala 23:22]
      io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 24:24]
      io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 25:25]
      io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 26:24]
      skip @[InstTypeDeco.scala 18:37]
    else : @[InstTypeDeco.scala 28:41]
      node _T_34 = eq(io.opcode, UInt<2>("h03")) @[InstTypeDeco.scala 28:30]
      when _T_34 : @[InstTypeDeco.scala 28:41]
        io.R <= UInt<1>("h00") @[InstTypeDeco.scala 29:22]
        io.Load <= UInt<1>("h01") @[InstTypeDeco.scala 30:25]
        io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 31:26]
        io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 32:27]
        io.I <= UInt<1>("h00") @[InstTypeDeco.scala 33:22]
        io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 34:24]
        io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 35:25]
        io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 36:24]
        skip @[InstTypeDeco.scala 28:41]
      else : @[InstTypeDeco.scala 38:42]
        node _T_44 = eq(io.opcode, UInt<6>("h023")) @[InstTypeDeco.scala 38:30]
        when _T_44 : @[InstTypeDeco.scala 38:42]
          io.R <= UInt<1>("h00") @[InstTypeDeco.scala 39:22]
          io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 40:25]
          io.Store <= UInt<1>("h01") @[InstTypeDeco.scala 41:26]
          io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 42:27]
          io.I <= UInt<1>("h00") @[InstTypeDeco.scala 43:22]
          io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 44:24]
          io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 45:25]
          io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 46:24]
          skip @[InstTypeDeco.scala 38:42]
        else : @[InstTypeDeco.scala 48:42]
          node _T_54 = eq(io.opcode, UInt<7>("h063")) @[InstTypeDeco.scala 48:30]
          when _T_54 : @[InstTypeDeco.scala 48:42]
            io.R <= UInt<1>("h00") @[InstTypeDeco.scala 49:22]
            io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 50:25]
            io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 51:26]
            io.Branch <= UInt<1>("h01") @[InstTypeDeco.scala 52:27]
            io.I <= UInt<1>("h00") @[InstTypeDeco.scala 53:22]
            io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 54:24]
            io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 55:25]
            io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 56:24]
            skip @[InstTypeDeco.scala 48:42]
          else : @[InstTypeDeco.scala 58:42]
            node _T_64 = eq(io.opcode, UInt<5>("h013")) @[InstTypeDeco.scala 58:30]
            when _T_64 : @[InstTypeDeco.scala 58:42]
              io.R <= UInt<1>("h00") @[InstTypeDeco.scala 59:22]
              io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 60:25]
              io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 61:26]
              io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 62:27]
              io.I <= UInt<1>("h01") @[InstTypeDeco.scala 63:22]
              io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 64:24]
              io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 65:25]
              io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 66:24]
              skip @[InstTypeDeco.scala 58:42]
            else : @[InstTypeDeco.scala 68:42]
              node _T_74 = eq(io.opcode, UInt<7>("h067")) @[InstTypeDeco.scala 68:30]
              when _T_74 : @[InstTypeDeco.scala 68:42]
                io.R <= UInt<1>("h00") @[InstTypeDeco.scala 69:22]
                io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 70:25]
                io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 71:26]
                io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 72:27]
                io.I <= UInt<1>("h00") @[InstTypeDeco.scala 73:22]
                io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 74:24]
                io.Jalr <= UInt<1>("h01") @[InstTypeDeco.scala 75:25]
                io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 76:24]
                skip @[InstTypeDeco.scala 68:42]
              else : @[InstTypeDeco.scala 78:42]
                node _T_84 = eq(io.opcode, UInt<7>("h06f")) @[InstTypeDeco.scala 78:30]
                when _T_84 : @[InstTypeDeco.scala 78:42]
                  io.R <= UInt<1>("h00") @[InstTypeDeco.scala 79:22]
                  io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 80:25]
                  io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 81:26]
                  io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 82:27]
                  io.I <= UInt<1>("h00") @[InstTypeDeco.scala 83:22]
                  io.Jal <= UInt<1>("h01") @[InstTypeDeco.scala 84:24]
                  io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 85:25]
                  io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 86:24]
                  skip @[InstTypeDeco.scala 78:42]
                else : @[InstTypeDeco.scala 88:42]
                  node _T_94 = eq(io.opcode, UInt<6>("h037")) @[InstTypeDeco.scala 88:30]
                  when _T_94 : @[InstTypeDeco.scala 88:42]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 89:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 90:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 91:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 92:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 93:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 94:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 95:25]
                    io.Lui <= UInt<1>("h01") @[InstTypeDeco.scala 96:24]
                    skip @[InstTypeDeco.scala 88:42]
                  else : @[InstTypeDeco.scala 98:20]
                    io.R <= UInt<1>("h00") @[InstTypeDeco.scala 99:22]
                    io.Load <= UInt<1>("h00") @[InstTypeDeco.scala 100:25]
                    io.Store <= UInt<1>("h00") @[InstTypeDeco.scala 101:26]
                    io.Branch <= UInt<1>("h00") @[InstTypeDeco.scala 102:27]
                    io.I <= UInt<1>("h00") @[InstTypeDeco.scala 103:22]
                    io.Jal <= UInt<1>("h00") @[InstTypeDeco.scala 104:24]
                    io.Jalr <= UInt<1>("h00") @[InstTypeDeco.scala 105:25]
                    io.Lui <= UInt<1>("h00") @[InstTypeDeco.scala 106:24]
                    skip @[InstTypeDeco.scala 98:20]
    
  module CntrlDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip R : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip Branch1 : UInt<1>, flip I : UInt<1>, flip Jal : UInt<1>, flip Jalr : UInt<1>, flip Lui : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    node _T_42 = eq(io.R, UInt<1>("h01")) @[CntrlDecode.scala 27:20]
    when _T_42 : @[CntrlDecode.scala 27:31]
      io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 28:29]
      io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 29:27]
      io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 30:28]
      io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 31:29]
      io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 32:29]
      io.AluOp <= UInt<1>("h00") @[CntrlDecode.scala 33:26]
      io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 34:24]
      io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 35:24]
      io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 36:27]
      io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 37:27]
      skip @[CntrlDecode.scala 27:31]
    else : @[CntrlDecode.scala 39:39]
      node _T_54 = eq(io.Load, UInt<1>("h01")) @[CntrlDecode.scala 39:28]
      when _T_54 : @[CntrlDecode.scala 39:39]
        io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 40:29]
        io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 41:27]
        io.MemRead <= UInt<1>("h01") @[CntrlDecode.scala 42:28]
        io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 43:29]
        io.MemtoReg <= UInt<1>("h01") @[CntrlDecode.scala 44:29]
        io.AluOp <= UInt<3>("h04") @[CntrlDecode.scala 45:26]
        io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 46:24]
        io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 47:24]
        io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 48:27]
        io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 49:27]
        skip @[CntrlDecode.scala 39:39]
      else : @[CntrlDecode.scala 51:40]
        node _T_66 = eq(io.Store, UInt<1>("h01")) @[CntrlDecode.scala 51:29]
        when _T_66 : @[CntrlDecode.scala 51:40]
          io.MemWrite <= UInt<1>("h01") @[CntrlDecode.scala 52:29]
          io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 53:27]
          io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 54:28]
          io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 55:29]
          io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 56:29]
          io.AluOp <= UInt<3>("h05") @[CntrlDecode.scala 57:26]
          io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 58:24]
          io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 59:24]
          io.ExtSel <= UInt<2>("h02") @[CntrlDecode.scala 60:27]
          io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 61:27]
          skip @[CntrlDecode.scala 51:40]
        else : @[CntrlDecode.scala 63:39]
          node _T_78 = eq(io.Branch1, UInt<1>("h01")) @[CntrlDecode.scala 63:31]
          when _T_78 : @[CntrlDecode.scala 63:39]
            io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 64:29]
            io.Branch <= UInt<1>("h01") @[CntrlDecode.scala 65:27]
            io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 66:28]
            io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 67:29]
            io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 68:29]
            io.AluOp <= UInt<2>("h02") @[CntrlDecode.scala 69:26]
            io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 70:24]
            io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 71:24]
            io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 72:27]
            io.NextPc <= UInt<1>("h01") @[CntrlDecode.scala 73:27]
            skip @[CntrlDecode.scala 63:39]
          else : @[CntrlDecode.scala 75:36]
            node _T_90 = eq(io.I, UInt<1>("h01")) @[CntrlDecode.scala 75:25]
            when _T_90 : @[CntrlDecode.scala 75:36]
              io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 76:29]
              io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 77:27]
              io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 78:28]
              io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 79:29]
              io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 80:29]
              io.AluOp <= UInt<1>("h01") @[CntrlDecode.scala 81:26]
              io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 82:24]
              io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 83:24]
              io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 84:27]
              io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 85:27]
              skip @[CntrlDecode.scala 75:36]
            else : @[CntrlDecode.scala 87:38]
              node _T_102 = eq(io.Jal, UInt<1>("h01")) @[CntrlDecode.scala 87:27]
              when _T_102 : @[CntrlDecode.scala 87:38]
                io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 88:29]
                io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 89:27]
                io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 90:28]
                io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 91:29]
                io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 92:29]
                io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 93:26]
                io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 94:24]
                io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 95:24]
                io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 96:27]
                io.NextPc <= UInt<2>("h02") @[CntrlDecode.scala 97:27]
                skip @[CntrlDecode.scala 87:38]
              else : @[CntrlDecode.scala 99:39]
                node _T_114 = eq(io.Jalr, UInt<1>("h01")) @[CntrlDecode.scala 99:28]
                when _T_114 : @[CntrlDecode.scala 99:39]
                  io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 100:29]
                  io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 101:27]
                  io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 102:28]
                  io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 103:29]
                  io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 104:29]
                  io.AluOp <= UInt<2>("h03") @[CntrlDecode.scala 105:26]
                  io.OpA <= UInt<2>("h02") @[CntrlDecode.scala 106:24]
                  io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 107:24]
                  io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 108:27]
                  io.NextPc <= UInt<2>("h03") @[CntrlDecode.scala 109:27]
                  skip @[CntrlDecode.scala 99:39]
                else : @[CntrlDecode.scala 111:38]
                  node _T_126 = eq(io.Lui, UInt<1>("h01")) @[CntrlDecode.scala 111:27]
                  when _T_126 : @[CntrlDecode.scala 111:38]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 112:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 113:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 114:28]
                    io.RegWrite <= UInt<1>("h01") @[CntrlDecode.scala 115:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 116:29]
                    io.AluOp <= UInt<3>("h06") @[CntrlDecode.scala 117:26]
                    io.OpA <= UInt<2>("h03") @[CntrlDecode.scala 118:24]
                    io.OpB <= UInt<1>("h01") @[CntrlDecode.scala 119:24]
                    io.ExtSel <= UInt<1>("h01") @[CntrlDecode.scala 120:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 121:27]
                    skip @[CntrlDecode.scala 111:38]
                  else : @[CntrlDecode.scala 123:20]
                    io.MemWrite <= UInt<1>("h00") @[CntrlDecode.scala 124:29]
                    io.Branch <= UInt<1>("h00") @[CntrlDecode.scala 125:27]
                    io.MemRead <= UInt<1>("h00") @[CntrlDecode.scala 126:28]
                    io.RegWrite <= UInt<1>("h00") @[CntrlDecode.scala 127:29]
                    io.MemtoReg <= UInt<1>("h00") @[CntrlDecode.scala 128:29]
                    io.AluOp <= UInt<3>("h07") @[CntrlDecode.scala 129:26]
                    io.OpA <= UInt<1>("h00") @[CntrlDecode.scala 130:24]
                    io.OpB <= UInt<1>("h00") @[CntrlDecode.scala 131:24]
                    io.ExtSel <= UInt<1>("h00") @[CntrlDecode.scala 132:27]
                    io.NextPc <= UInt<1>("h00") @[CntrlDecode.scala 133:27]
                    skip @[CntrlDecode.scala 123:20]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, AluOp : UInt<3>, OpA : UInt<2>, OpB : UInt<1>, ExtSel : UInt<2>, NextPc : UInt<2>}
    
    inst c1 of InstTypeDeco @[Control.scala 20:24]
    c1.clock <= clock
    c1.reset <= reset
    inst c2 of CntrlDecode @[Control.scala 21:24]
    c2.clock <= clock
    c2.reset <= reset
    c1.io.opcode <= io.opcode @[Control.scala 23:22]
    c2.io.R <= c1.io.R @[Control.scala 25:17]
    c2.io.Load <= c1.io.Load @[Control.scala 26:20]
    c2.io.Store <= c1.io.Store @[Control.scala 27:21]
    c2.io.Branch1 <= c1.io.Branch @[Control.scala 28:23]
    c2.io.I <= c1.io.I @[Control.scala 29:17]
    c2.io.Jal <= c1.io.Jal @[Control.scala 30:19]
    c2.io.Jalr <= c1.io.Jalr @[Control.scala 31:20]
    c2.io.Lui <= c1.io.Lui @[Control.scala 32:19]
    io.MemWrite <= c2.io.MemWrite @[Control.scala 34:21]
    io.Branch <= c2.io.Branch @[Control.scala 35:19]
    io.MemRead <= c2.io.MemRead @[Control.scala 36:20]
    io.RegWrite <= c2.io.RegWrite @[Control.scala 37:21]
    io.MemtoReg <= c2.io.MemtoReg @[Control.scala 38:21]
    io.AluOp <= c2.io.AluOp @[Control.scala 39:18]
    io.OpA <= c2.io.OpA @[Control.scala 40:16]
    io.OpB <= c2.io.OpB @[Control.scala 41:16]
    io.ExtSel <= c2.io.ExtSel @[Control.scala 42:19]
    io.NextPc <= c2.io.NextPc @[Control.scala 43:19]
    
  module ImmGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip instruction : UInt<32>, flip pc : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node _T_19 = bits(io.instruction, 31, 25) @[ImmGen.scala 18:42]
    node _T_20 = bits(io.instruction, 11, 7) @[ImmGen.scala 18:64]
    node s_imm13 = cat(_T_19, _T_20) @[Cat.scala 30:58]
    node _T_21 = bits(s_imm13, 11, 11) @[ImmGen.scala 19:41]
    node _T_22 = bits(_T_21, 0, 0) @[Bitwise.scala 72:15]
    node _T_25 = mux(_T_22, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_26 = cat(_T_25, s_imm13) @[Cat.scala 30:58]
    node _T_27 = asSInt(_T_26) @[ImmGen.scala 19:57]
    io.s_imm <= _T_27 @[ImmGen.scala 19:18]
    node _T_28 = bits(io.instruction, 31, 31) @[ImmGen.scala 21:43]
    node _T_29 = bits(io.instruction, 7, 7) @[ImmGen.scala 21:62]
    node _T_30 = bits(io.instruction, 30, 25) @[ImmGen.scala 21:80]
    node _T_31 = bits(io.instruction, 11, 8) @[ImmGen.scala 21:102]
    node _T_33 = cat(_T_31, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_34 = cat(_T_28, _T_29) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, _T_30) @[Cat.scala 30:58]
    node sb_imm13 = cat(_T_35, _T_33) @[Cat.scala 30:58]
    node _T_36 = bits(sb_imm13, 12, 12) @[ImmGen.scala 22:44]
    node _T_37 = bits(_T_36, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_41 = cat(_T_40, sb_imm13) @[Cat.scala 30:58]
    node _T_42 = add(_T_41, io.pc) @[ImmGen.scala 22:61]
    node _T_43 = tail(_T_42, 1) @[ImmGen.scala 22:61]
    node _T_44 = asSInt(_T_43) @[ImmGen.scala 22:70]
    io.sb_imm <= _T_44 @[ImmGen.scala 22:19]
    node _T_45 = bits(io.instruction, 31, 31) @[ImmGen.scala 24:43]
    node _T_46 = bits(io.instruction, 19, 12) @[ImmGen.scala 24:62]
    node _T_47 = bits(io.instruction, 20, 20) @[ImmGen.scala 24:84]
    node _T_48 = bits(io.instruction, 30, 21) @[ImmGen.scala 24:103]
    node _T_50 = cat(_T_48, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_51 = cat(_T_45, _T_46) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, _T_47) @[Cat.scala 30:58]
    node uj_imm21 = cat(_T_52, _T_50) @[Cat.scala 30:58]
    node _T_53 = bits(uj_imm21, 20, 20) @[ImmGen.scala 25:44]
    node _T_54 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_54, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_58 = cat(_T_57, uj_imm21) @[Cat.scala 30:58]
    node _T_59 = add(_T_58, io.pc) @[ImmGen.scala 25:61]
    node _T_60 = tail(_T_59, 1) @[ImmGen.scala 25:61]
    node _T_61 = asSInt(_T_60) @[ImmGen.scala 25:70]
    io.uj_imm <= _T_61 @[ImmGen.scala 25:19]
    node _T_62 = bits(io.instruction, 31, 31) @[ImmGen.scala 27:49]
    node _T_63 = bits(_T_62, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_63, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = bits(io.instruction, 31, 12) @[ImmGen.scala 27:69]
    node _T_68 = cat(_T_66, _T_67) @[Cat.scala 30:58]
    node _T_69 = shl(_T_68, 12) @[ImmGen.scala 27:79]
    node _T_70 = asSInt(_T_69) @[ImmGen.scala 27:86]
    io.u_imm <= _T_70 @[ImmGen.scala 27:18]
    node _T_71 = bits(io.instruction, 31, 31) @[ImmGen.scala 29:48]
    node _T_72 = bits(_T_71, 0, 0) @[Bitwise.scala 72:15]
    node _T_75 = mux(_T_72, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_76 = bits(io.instruction, 31, 20) @[ImmGen.scala 29:68]
    node _T_77 = cat(_T_75, _T_76) @[Cat.scala 30:58]
    node _T_78 = asSInt(_T_77) @[ImmGen.scala 29:78]
    io.i_imm <= _T_78 @[ImmGen.scala 29:18]
    
  module AluCntrl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip aluOp : UInt<3>, flip funct3 : UInt<3>, flip funct7 : UInt<1>, out : UInt<5>}
    
    node _T_14 = eq(io.aluOp, UInt<1>("h00")) @[AluCntrl.scala 11:24]
    node _T_16 = eq(io.aluOp, UInt<1>("h01")) @[AluCntrl.scala 11:49]
    node _T_17 = or(_T_14, _T_16) @[AluCntrl.scala 11:37]
    when _T_17 : @[AluCntrl.scala 11:62]
      node _T_19 = cat(UInt<1>("h00"), io.funct7) @[Cat.scala 30:58]
      node _T_20 = cat(_T_19, io.funct3) @[Cat.scala 30:58]
      io.out <= _T_20 @[AluCntrl.scala 11:70]
      skip @[AluCntrl.scala 11:62]
    else : @[AluCntrl.scala 12:67]
      node _T_22 = eq(io.aluOp, UInt<3>("h05")) @[AluCntrl.scala 12:29]
      node _T_24 = eq(io.aluOp, UInt<3>("h04")) @[AluCntrl.scala 12:54]
      node _T_25 = or(_T_22, _T_24) @[AluCntrl.scala 12:42]
      when _T_25 : @[AluCntrl.scala 12:67]
        io.out <= UInt<1>("h00") @[AluCntrl.scala 12:75]
        skip @[AluCntrl.scala 12:67]
      else : @[AluCntrl.scala 13:42]
        node _T_28 = eq(io.aluOp, UInt<2>("h03")) @[AluCntrl.scala 13:29]
        when _T_28 : @[AluCntrl.scala 13:42]
          io.out <= UInt<5>("h01f") @[AluCntrl.scala 13:50]
          skip @[AluCntrl.scala 13:42]
        else : @[AluCntrl.scala 14:42]
          node _T_31 = eq(io.aluOp, UInt<2>("h02")) @[AluCntrl.scala 14:29]
          when _T_31 : @[AluCntrl.scala 14:42]
            node _T_33 = cat(UInt<2>("h02"), io.funct3) @[Cat.scala 30:58]
            io.out <= _T_33 @[AluCntrl.scala 14:50]
            skip @[AluCntrl.scala 14:42]
          else : @[AluCntrl.scala 15:42]
            node _T_35 = eq(io.aluOp, UInt<3>("h06")) @[AluCntrl.scala 15:29]
            when _T_35 : @[AluCntrl.scala 15:42]
              io.out <= UInt<1>("h00") @[AluCntrl.scala 15:50]
              skip @[AluCntrl.scala 15:42]
            else : @[AluCntrl.scala 16:20]
              io.out is invalid @[AluCntrl.scala 16:28]
              skip @[AluCntrl.scala 16:20]
    
  module Register : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RegWrite : UInt<1>, flip rs1_s : UInt<5>, flip rs2_s : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg register : SInt<32>[32], clock @[Register.scala 16:27]
    register[0] <= asSInt(UInt<1>("h00")) @[Register.scala 17:21]
    io.rs1 <= register[io.rs1_s] @[Register.scala 18:16]
    io.rs2 <= register[io.rs2_s] @[Register.scala 19:16]
    node _T_60 = eq(io.RegWrite, UInt<1>("h01")) @[Register.scala 20:26]
    when _T_60 : @[Register.scala 20:34]
      node _T_62 = eq(io.rd, UInt<1>("h00")) @[Register.scala 21:28]
      when _T_62 : @[Register.scala 21:43]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[Register.scala 21:60]
        skip @[Register.scala 21:43]
      else : @[Register.scala 22:28]
        register[io.rd] <= io.WriteData @[Register.scala 22:45]
        skip @[Register.scala 22:28]
      skip @[Register.scala 20:34]
    
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<10>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[Memory.scala 11:22]
    infer mport _T_11 = mem[io.wrAddr], clock @[Memory.scala 12:25]
    io.rdData <= _T_11 @[Memory.scala 12:19]
    
  module Pc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt, clock @[Pc.scala 10:26]
    reg <= UInt<32>("h00") @[Pc.scala 10:26]
    reg <= io.input @[Pc.scala 11:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[Pc.scala 12:23]
    node _T_15 = tail(_T_14, 1) @[Pc.scala 12:23]
    io.pc4 <= _T_15 @[Pc.scala 12:16]
    io.pc <= reg @[Pc.scala 13:15]
    
  module Jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : SInt<32>, flip in2 : SInt<32>, out : SInt<32>}
    
    node _T_11 = add(io.in1, io.in2) @[Jalr.scala 11:24]
    node _T_12 = tail(_T_11, 1) @[Jalr.scala 11:24]
    node a = asSInt(_T_12) @[Jalr.scala 11:24]
    node _T_14 = and(a, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 12:21]
    node _T_15 = asSInt(_T_14) @[Jalr.scala 12:21]
    io.out <= _T_15 @[Jalr.scala 12:16]
    
  module MemoryD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[MemoryD.scala 15:22]
    node _T_18 = eq(io.MemWrite, UInt<1>("h01")) @[MemoryD.scala 16:27]
    when _T_18 : @[MemoryD.scala 16:35]
      write mport _T_19 = mem[io.Addr], clock
      _T_19 <= io.Data
      skip @[MemoryD.scala 16:35]
    node _T_21 = eq(io.MemRead, UInt<1>("h01")) @[MemoryD.scala 21:25]
    when _T_21 : @[MemoryD.scala 21:33]
      read mport _T_22 = mem[io.Addr], clock @[MemoryD.scala 22:35]
      io.out <= _T_22 @[MemoryD.scala 22:24]
      skip @[MemoryD.scala 21:33]
    else : @[MemoryD.scala 24:20]
      io.out is invalid @[MemoryD.scala 24:28]
      skip @[MemoryD.scala 24:20]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {Reg_Out : SInt<32>}
    
    inst Alu of Alu @[Top.scala 13:25]
    Alu.clock <= clock
    Alu.reset <= reset
    inst Control of Control @[Top.scala 14:29]
    Control.clock <= clock
    Control.reset <= reset
    inst ImmediateGeneration of ImmGen @[Top.scala 15:41]
    ImmediateGeneration.clock <= clock
    ImmediateGeneration.reset <= reset
    inst AluControl of AluCntrl @[Top.scala 16:32]
    AluControl.clock <= clock
    AluControl.reset <= reset
    inst Register of Register @[Top.scala 17:30]
    Register.clock <= clock
    Register.reset <= reset
    inst Memory of Memory @[Top.scala 18:28]
    Memory.clock <= clock
    Memory.reset <= reset
    inst Pc of Pc @[Top.scala 19:24]
    Pc.clock <= clock
    Pc.reset <= reset
    inst Jalr of Jalr @[Top.scala 20:26]
    Jalr.clock <= clock
    Jalr.reset <= reset
    inst DataMemory of MemoryD @[Top.scala 21:32]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    node _T_7 = bits(Pc.io.pc, 11, 2) @[Top.scala 24:37]
    Memory.io.wrAddr <= _T_7 @[Top.scala 24:26]
    Pc.io.input <= Pc.io.pc4 @[Top.scala 25:21]
    node _T_8 = bits(Memory.io.rdData, 6, 0) @[Top.scala 27:46]
    Control.io.opcode <= _T_8 @[Top.scala 27:27]
    ImmediateGeneration.io.instruction <= Memory.io.rdData @[Top.scala 28:44]
    ImmediateGeneration.io.pc <= Pc.io.pc @[Top.scala 29:35]
    Register.io.RegWrite <= Control.io.RegWrite @[Top.scala 31:30]
    node _T_9 = bits(Memory.io.rdData, 19, 15) @[Top.scala 32:46]
    Register.io.rs1_s <= _T_9 @[Top.scala 32:27]
    node _T_10 = bits(Memory.io.rdData, 24, 20) @[Top.scala 33:46]
    Register.io.rs2_s <= _T_10 @[Top.scala 33:27]
    node _T_11 = bits(Memory.io.rdData, 11, 7) @[Top.scala 34:43]
    Register.io.rd <= _T_11 @[Top.scala 34:24]
    AluControl.io.aluOp <= Control.io.AluOp @[Top.scala 37:29]
    node _T_12 = bits(Memory.io.rdData, 14, 12) @[Top.scala 38:49]
    AluControl.io.funct3 <= _T_12 @[Top.scala 38:30]
    node _T_13 = bits(Memory.io.rdData, 30, 30) @[Top.scala 39:49]
    AluControl.io.funct7 <= _T_13 @[Top.scala 39:30]
    node _T_15 = eq(Control.io.ExtSel, UInt<1>("h00")) @[Top.scala 43:33]
    node _T_17 = eq(Control.io.OpB, UInt<1>("h01")) @[Top.scala 43:63]
    node _T_18 = and(_T_15, _T_17) @[Top.scala 43:45]
    when _T_18 : @[Top.scala 43:74]
      Alu.io.in2 <= ImmediateGeneration.io.i_imm @[Top.scala 43:86]
      skip @[Top.scala 43:74]
    else : @[Top.scala 44:79]
      node _T_20 = eq(Control.io.ExtSel, UInt<1>("h01")) @[Top.scala 44:38]
      node _T_22 = eq(Control.io.OpB, UInt<1>("h01")) @[Top.scala 44:68]
      node _T_23 = and(_T_20, _T_22) @[Top.scala 44:50]
      when _T_23 : @[Top.scala 44:79]
        Alu.io.in2 <= ImmediateGeneration.io.u_imm @[Top.scala 44:91]
        skip @[Top.scala 44:79]
      else : @[Top.scala 45:79]
        node _T_25 = eq(Control.io.ExtSel, UInt<2>("h02")) @[Top.scala 45:38]
        node _T_27 = eq(Control.io.OpB, UInt<1>("h01")) @[Top.scala 45:68]
        node _T_28 = and(_T_25, _T_27) @[Top.scala 45:50]
        when _T_28 : @[Top.scala 45:79]
          Alu.io.in2 <= ImmediateGeneration.io.s_imm @[Top.scala 46:28]
          skip @[Top.scala 45:79]
        else : @[Top.scala 49:20]
          Alu.io.in2 <= Register.io.rs2 @[Top.scala 49:32]
          skip @[Top.scala 49:20]
    Alu.io.AluControl <= AluControl.io.out @[Top.scala 50:27]
    Register.io.WriteData <= Alu.io.out @[Top.scala 51:31]
    io.Reg_Out <= Register.io.WriteData @[Top.scala 52:20]
    node _T_30 = eq(Control.io.NextPc, UInt<1>("h01")) @[Top.scala 54:33]
    node _T_32 = eq(Control.io.Branch, UInt<1>("h00")) @[Top.scala 54:66]
    node _T_33 = and(_T_30, _T_32) @[Top.scala 54:45]
    node _T_35 = eq(Alu.io.Branch, UInt<1>("h00")) @[Top.scala 54:94]
    node _T_36 = and(_T_33, _T_35) @[Top.scala 54:77]
    when _T_36 : @[Top.scala 54:105]
      Pc.io.input <= Pc.io.pc4 @[Top.scala 54:118]
      skip @[Top.scala 54:105]
    else : @[Top.scala 55:110]
      node _T_38 = eq(Control.io.NextPc, UInt<1>("h01")) @[Top.scala 55:38]
      node _T_40 = eq(Control.io.Branch, UInt<1>("h01")) @[Top.scala 55:71]
      node _T_41 = and(_T_38, _T_40) @[Top.scala 55:50]
      node _T_43 = eq(Alu.io.Branch, UInt<1>("h00")) @[Top.scala 55:99]
      node _T_44 = and(_T_41, _T_43) @[Top.scala 55:82]
      when _T_44 : @[Top.scala 55:110]
        Pc.io.input <= Pc.io.pc4 @[Top.scala 55:123]
        skip @[Top.scala 55:110]
      else : @[Top.scala 56:110]
        node _T_46 = eq(Control.io.NextPc, UInt<1>("h01")) @[Top.scala 56:38]
        node _T_48 = eq(Control.io.Branch, UInt<1>("h00")) @[Top.scala 56:71]
        node _T_49 = and(_T_46, _T_48) @[Top.scala 56:50]
        node _T_51 = eq(Alu.io.Branch, UInt<1>("h01")) @[Top.scala 56:99]
        node _T_52 = and(_T_49, _T_51) @[Top.scala 56:82]
        when _T_52 : @[Top.scala 56:110]
          Pc.io.input <= Pc.io.pc4 @[Top.scala 56:123]
          skip @[Top.scala 56:110]
        else : @[Top.scala 57:110]
          node _T_54 = eq(Control.io.NextPc, UInt<1>("h01")) @[Top.scala 57:38]
          node _T_56 = eq(Control.io.Branch, UInt<1>("h01")) @[Top.scala 57:71]
          node _T_57 = and(_T_54, _T_56) @[Top.scala 57:50]
          node _T_59 = eq(Alu.io.Branch, UInt<1>("h01")) @[Top.scala 57:99]
          node _T_60 = and(_T_57, _T_59) @[Top.scala 57:82]
          when _T_60 : @[Top.scala 57:110]
            node _T_61 = asUInt(ImmediateGeneration.io.sb_imm) @[Top.scala 57:156]
            Pc.io.input <= _T_61 @[Top.scala 57:123]
            skip @[Top.scala 57:110]
          else : @[Top.scala 58:50]
            node _T_63 = eq(Control.io.NextPc, UInt<1>("h00")) @[Top.scala 58:38]
            when _T_63 : @[Top.scala 58:50]
              Pc.io.input <= Pc.io.pc4 @[Top.scala 58:63]
              skip @[Top.scala 58:50]
            else : @[Top.scala 59:50]
              node _T_65 = eq(Control.io.NextPc, UInt<2>("h02")) @[Top.scala 59:38]
              when _T_65 : @[Top.scala 59:50]
                node _T_66 = asUInt(ImmediateGeneration.io.uj_imm) @[Top.scala 59:96]
                Pc.io.input <= _T_66 @[Top.scala 59:63]
                skip @[Top.scala 59:50]
              else : @[Top.scala 60:50]
                node _T_68 = eq(Control.io.NextPc, UInt<2>("h03")) @[Top.scala 60:38]
                when _T_68 : @[Top.scala 60:50]
                  node _T_69 = asUInt(Jalr.io.out) @[Top.scala 60:78]
                  Pc.io.input <= _T_69 @[Top.scala 60:63]
                  skip @[Top.scala 60:50]
                else : @[Top.scala 61:20]
                  Pc.io.input is invalid @[Top.scala 61:33]
                  skip @[Top.scala 61:20]
    Jalr.io.in1 <= Register.io.rs1 @[Top.scala 63:21]
    Jalr.io.in2 <= ImmediateGeneration.io.i_imm @[Top.scala 64:21]
    node _T_70 = bits(Alu.io.out, 9, 2) @[Top.scala 66:42]
    DataMemory.io.Addr <= _T_70 @[Top.scala 66:28]
    DataMemory.io.Data <= Register.io.rs2 @[Top.scala 67:28]
    DataMemory.io.MemWrite <= Control.io.MemWrite @[Top.scala 68:32]
    DataMemory.io.MemRead <= Control.io.MemRead @[Top.scala 69:31]
    node _T_72 = eq(Control.io.MemtoReg, UInt<1>("h01")) @[Top.scala 71:35]
    when _T_72 : @[Top.scala 71:43]
      Register.io.WriteData <= DataMemory.io.out @[Top.scala 71:66]
      skip @[Top.scala 71:43]
    else : @[Top.scala 72:20]
      Register.io.WriteData <= Alu.io.out @[Top.scala 72:43]
      skip @[Top.scala 72:20]
    node _T_74 = eq(Control.io.OpA, UInt<1>("h00")) @[Top.scala 74:30]
    node _T_76 = eq(Control.io.OpA, UInt<2>("h03")) @[Top.scala 74:60]
    node _T_77 = or(_T_74, _T_76) @[Top.scala 74:42]
    when _T_77 : @[Top.scala 74:72]
      Alu.io.in1 <= Register.io.rs1 @[Top.scala 74:84]
      skip @[Top.scala 74:72]
    else : @[Top.scala 75:47]
      node _T_79 = eq(Control.io.OpA, UInt<2>("h02")) @[Top.scala 75:35]
      when _T_79 : @[Top.scala 75:47]
        node _T_80 = asSInt(Pc.io.pc4) @[Top.scala 75:72]
        Alu.io.in1 <= _T_80 @[Top.scala 75:59]
        skip @[Top.scala 75:47]
      else : @[Top.scala 76:20]
        Alu.io.in1 is invalid @[Top.scala 76:32]
        skip @[Top.scala 76:20]
    
