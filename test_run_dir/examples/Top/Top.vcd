$version Generated by VerilatedVcd $end
$date Sun Jan  5 17:45:51 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 t clock $end
  $var wire 32 v io_Reg_Out [31:0] $end
  $var wire  1 u reset $end
  $scope module Top $end
   $var wire  3 - AluControl_io_aluOp [2:0] $end
   $var wire  3 8 AluControl_io_funct3 [2:0] $end
   $var wire  1 9 AluControl_io_funct7 $end
   $var wire  5 # AluControl_io_out [4:0] $end
   $var wire  5 # Alu_io_AluControl [4:0] $end
   $var wire  1 & Alu_io_Branch $end
   $var wire 32 $ Alu_io_in1 [31:0] $end
   $var wire 32 % Alu_io_in2 [31:0] $end
   $var wire 32 ' Alu_io_out [31:0] $end
   $var wire  3 - Control_io_AluOp [2:0] $end
   $var wire  1 * Control_io_Branch $end
   $var wire  2 0 Control_io_ExtSel [1:0] $end
   $var wire  1 + Control_io_MemRead $end
   $var wire  1 ) Control_io_MemWrite $end
   $var wire  1 + Control_io_MemtoReg $end
   $var wire  2 1 Control_io_NextPc [1:0] $end
   $var wire  2 . Control_io_OpA [1:0] $end
   $var wire  1 / Control_io_OpB $end
   $var wire  1 , Control_io_RegWrite $end
   $var wire  7 ( Control_io_opcode [6:0] $end
   $var wire  1 t DataMemory_clock $end
   $var wire  8 B DataMemory_io_Addr [7:0] $end
   $var wire 32 ? DataMemory_io_Data [31:0] $end
   $var wire  1 + DataMemory_io_MemRead $end
   $var wire  1 ) DataMemory_io_MemWrite $end
   $var wire 32 C DataMemory_io_out [31:0] $end
   $var wire 32 7 ImmediateGeneration_io_i_imm [31:0] $end
   $var wire 32 2 ImmediateGeneration_io_instruction [31:0] $end
   $var wire 32 Q ImmediateGeneration_io_pc [31:0] $end
   $var wire 32 3 ImmediateGeneration_io_s_imm [31:0] $end
   $var wire 32 4 ImmediateGeneration_io_sb_imm [31:0] $end
   $var wire 32 6 ImmediateGeneration_io_u_imm [31:0] $end
   $var wire 32 5 ImmediateGeneration_io_uj_imm [31:0] $end
   $var wire 32 > Jalr_io_in1 [31:0] $end
   $var wire 32 7 Jalr_io_in2 [31:0] $end
   $var wire 32 A Jalr_io_out [31:0] $end
   $var wire  1 t Memory_clock $end
   $var wire 32 2 Memory_io_rdData [31:0] $end
   $var wire 10 R Memory_io_wrAddr [9:0] $end
   $var wire  1 t Pc_clock $end
   $var wire 32 @ Pc_io_input [31:0] $end
   $var wire 32 Q Pc_io_pc [31:0] $end
   $var wire 32 S Pc_io_pc4 [31:0] $end
   $var wire  1 t Register_clock $end
   $var wire  1 , Register_io_RegWrite $end
   $var wire 32 = Register_io_WriteData [31:0] $end
   $var wire  5 < Register_io_rd [4:0] $end
   $var wire 32 > Register_io_rs1 [31:0] $end
   $var wire  5 : Register_io_rs1_s [4:0] $end
   $var wire 32 ? Register_io_rs2 [31:0] $end
   $var wire  5 ; Register_io_rs2_s [4:0] $end
   $var wire  1 t clock $end
   $var wire 32 v io_Reg_Out [31:0] $end
   $var wire  1 u reset $end
   $scope module Alu $end
    $var wire  5 # io_AluControl [4:0] $end
    $var wire  1 & io_Branch $end
    $var wire 32 $ io_in1 [31:0] $end
    $var wire 32 % io_in2 [31:0] $end
    $var wire 32 ' io_out [31:0] $end
   $upscope $end
   $scope module AluControl $end
    $var wire  3 - io_aluOp [2:0] $end
    $var wire  3 8 io_funct3 [2:0] $end
    $var wire  1 9 io_funct7 $end
    $var wire  5 # io_out [4:0] $end
   $upscope $end
   $scope module Control $end
    $var wire  1 G c1_io_Branch $end
    $var wire  1 H c1_io_I $end
    $var wire  1 I c1_io_Jal $end
    $var wire  1 J c1_io_Jalr $end
    $var wire  1 E c1_io_Load $end
    $var wire  1 K c1_io_Lui $end
    $var wire  1 D c1_io_R $end
    $var wire  1 F c1_io_Store $end
    $var wire  7 ( c1_io_opcode [6:0] $end
    $var wire  3 - c2_io_AluOp [2:0] $end
    $var wire  1 * c2_io_Branch $end
    $var wire  1 G c2_io_Branch1 $end
    $var wire  2 0 c2_io_ExtSel [1:0] $end
    $var wire  1 H c2_io_I $end
    $var wire  1 I c2_io_Jal $end
    $var wire  1 J c2_io_Jalr $end
    $var wire  1 E c2_io_Load $end
    $var wire  1 K c2_io_Lui $end
    $var wire  1 + c2_io_MemRead $end
    $var wire  1 ) c2_io_MemWrite $end
    $var wire  1 + c2_io_MemtoReg $end
    $var wire  2 1 c2_io_NextPc [1:0] $end
    $var wire  2 . c2_io_OpA [1:0] $end
    $var wire  1 / c2_io_OpB $end
    $var wire  1 D c2_io_R $end
    $var wire  1 , c2_io_RegWrite $end
    $var wire  1 F c2_io_Store $end
    $var wire  3 - io_AluOp [2:0] $end
    $var wire  1 * io_Branch $end
    $var wire  2 0 io_ExtSel [1:0] $end
    $var wire  1 + io_MemRead $end
    $var wire  1 ) io_MemWrite $end
    $var wire  1 + io_MemtoReg $end
    $var wire  2 1 io_NextPc [1:0] $end
    $var wire  2 . io_OpA [1:0] $end
    $var wire  1 / io_OpB $end
    $var wire  1 , io_RegWrite $end
    $var wire  7 ( io_opcode [6:0] $end
    $scope module c1 $end
     $var wire  1 G io_Branch $end
     $var wire  1 H io_I $end
     $var wire  1 I io_Jal $end
     $var wire  1 J io_Jalr $end
     $var wire  1 E io_Load $end
     $var wire  1 K io_Lui $end
     $var wire  1 D io_R $end
     $var wire  1 F io_Store $end
     $var wire  7 ( io_opcode [6:0] $end
    $upscope $end
    $scope module c2 $end
     $var wire  3 - io_AluOp [2:0] $end
     $var wire  1 * io_Branch $end
     $var wire  1 G io_Branch1 $end
     $var wire  2 0 io_ExtSel [1:0] $end
     $var wire  1 H io_I $end
     $var wire  1 I io_Jal $end
     $var wire  1 J io_Jalr $end
     $var wire  1 E io_Load $end
     $var wire  1 K io_Lui $end
     $var wire  1 + io_MemRead $end
     $var wire  1 ) io_MemWrite $end
     $var wire  1 + io_MemtoReg $end
     $var wire  2 1 io_NextPc [1:0] $end
     $var wire  2 . io_OpA [1:0] $end
     $var wire  1 / io_OpB $end
     $var wire  1 D io_R $end
     $var wire  1 , io_RegWrite $end
     $var wire  1 F io_Store $end
    $upscope $end
   $upscope $end
   $scope module DataMemory $end
    $var wire  1 t clock $end
    $var wire  8 B io_Addr [7:0] $end
    $var wire 32 ? io_Data [31:0] $end
    $var wire  1 + io_MemRead $end
    $var wire  1 ) io_MemWrite $end
    $var wire 32 C io_out [31:0] $end
    $var wire 10 P mem__T_19_addr [9:0] $end
    $var wire 32 ? mem__T_19_data [31:0] $end
    $var wire  1 ) mem__T_19_en $end
    $var wire  1 w mem__T_19_mask $end
    $var wire 10 P mem__T_22_addr [9:0] $end
    $var wire 32 C mem__T_22_data [31:0] $end
   $upscope $end
   $scope module ImmediateGeneration $end
    $var wire 32 7 io_i_imm [31:0] $end
    $var wire 32 2 io_instruction [31:0] $end
    $var wire 32 Q io_pc [31:0] $end
    $var wire 32 3 io_s_imm [31:0] $end
    $var wire 32 4 io_sb_imm [31:0] $end
    $var wire 32 6 io_u_imm [31:0] $end
    $var wire 32 5 io_uj_imm [31:0] $end
    $var wire 12 L s_imm13 [11:0] $end
    $var wire 13 M sb_imm13 [12:0] $end
    $var wire 21 N uj_imm21 [20:0] $end
   $upscope $end
   $scope module Jalr $end
    $var wire 32 O a [31:0] $end
    $var wire 32 > io_in1 [31:0] $end
    $var wire 32 7 io_in2 [31:0] $end
    $var wire 32 A io_out [31:0] $end
   $upscope $end
   $scope module Memory $end
    $var wire  1 t clock $end
    $var wire 32 2 io_rdData [31:0] $end
    $var wire 10 R io_wrAddr [9:0] $end
    $var wire 10 R mem__T_11_addr [9:0] $end
    $var wire 32 2 mem__T_11_data [31:0] $end
    $scope module BindsTo_0_Memory_Inst $end
     $var wire  1 t clock $end
     $var wire 32 2 io_rdData [31:0] $end
     $var wire 10 R io_wrAddr [9:0] $end
    $upscope $end
   $upscope $end
   $scope module Pc $end
    $var wire  1 t clock $end
    $var wire 32 @ io_input [31:0] $end
    $var wire 32 Q io_pc [31:0] $end
    $var wire 32 S io_pc4 [31:0] $end
    $var wire 32 Q reg$ [31:0] $end
   $upscope $end
   $scope module Register $end
    $var wire  1 t clock $end
    $var wire  1 , io_RegWrite $end
    $var wire 32 = io_WriteData [31:0] $end
    $var wire  5 < io_rd [4:0] $end
    $var wire 32 > io_rs1 [31:0] $end
    $var wire  5 : io_rs1_s [4:0] $end
    $var wire 32 ? io_rs2 [31:0] $end
    $var wire  5 ; io_rs2_s [4:0] $end
    $var wire 32 T register_0 [31:0] $end
    $var wire 32 U register_1 [31:0] $end
    $var wire 32 ^ register_10 [31:0] $end
    $var wire 32 _ register_11 [31:0] $end
    $var wire 32 ` register_12 [31:0] $end
    $var wire 32 a register_13 [31:0] $end
    $var wire 32 b register_14 [31:0] $end
    $var wire 32 c register_15 [31:0] $end
    $var wire 32 d register_16 [31:0] $end
    $var wire 32 e register_17 [31:0] $end
    $var wire 32 f register_18 [31:0] $end
    $var wire 32 g register_19 [31:0] $end
    $var wire 32 V register_2 [31:0] $end
    $var wire 32 h register_20 [31:0] $end
    $var wire 32 i register_21 [31:0] $end
    $var wire 32 j register_22 [31:0] $end
    $var wire 32 k register_23 [31:0] $end
    $var wire 32 l register_24 [31:0] $end
    $var wire 32 m register_25 [31:0] $end
    $var wire 32 n register_26 [31:0] $end
    $var wire 32 o register_27 [31:0] $end
    $var wire 32 p register_28 [31:0] $end
    $var wire 32 q register_29 [31:0] $end
    $var wire 32 W register_3 [31:0] $end
    $var wire 32 r register_30 [31:0] $end
    $var wire 32 s register_31 [31:0] $end
    $var wire 32 X register_4 [31:0] $end
    $var wire 32 Y register_5 [31:0] $end
    $var wire 32 Z register_6 [31:0] $end
    $var wire 32 [ register_7 [31:0] $end
    $var wire 32 \ register_8 [31:0] $end
    $var wire 32 ] register_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000101 %
0&
b00000000000000000000000000000101 '
b0010011 (
0)
0*
0+
1,
b001 -
b00 .
1/
b00 0
b00 1
b00000000010100000000000100010011 2
b00000000000000000000000000000010 3
b00000000000000000000000000000010 4
b00000000000000000000100000000100 5
b00000000010100000000000000000000 6
b00000000000000000000000000000101 7
b000 8
09
b00000 :
b00101 ;
b00010 <
b00000000000000000000000000000101 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000100 @
b00000000000000000000000000000100 A
b00000001 B
b00000000000000000000000000000000 C
0D
0E
0F
0G
1H
0I
0J
0K
b000000000010 L
b0000000000010 M
b000000000100000000100 N
b00000000000000000000000000000101 O
b0000000001 P
b00000000000000000000000000000000 Q
b0000000000 R
b00000000000000000000000000000100 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
0t
1u
b00000000000000000000000000000101 v
1w
#1
b00000000010100000000000110010011 2
b00000000000000000000000000000011 3
b00000000000000000000100000000110 4
b00000000000000000000100000001000 5
b00011 <
b00000000000000000000000000001000 @
b000000000011 L
b0100000000010 M
b00000000000000000000000000000100 Q
b0000000001 R
b00000000000000000000000000001000 S
b00000000000000000000000000000101 V
1t
#2
0t
#3
b11111 #
b00000000000000000000000000001100 $
b00000000000000000000000000000000 %
b00000000000000000000000000001100 '
b1101111 (
b011 -
b10 .
0/
b10 1
b00000001010000000000000011101111 2
b00000000000000000000000000000001 3
b00000000000000000000100000001000 4
b00000000000000000000000000011100 5
b00000001010000000000000000000000 6
b00000000000000000000000000010100 7
b10100 ;
b00001 <
b00000000000000000000000000001100 =
b00000000000000000000000000011100 @
b00000000000000000000000000010100 A
b00000011 B
0H
1I
b000000000001 L
b0100000000000 M
b000000000000000010100 N
b00000000000000000000000000010100 O
b0000000011 P
b00000000000000000000000000001000 Q
b0000000010 R
b00000000000000000000000000001100 S
b00000000000000000000000000000101 W
1t
b00000000000000000000000000001100 v
#4
0t
#5
b00000 #
b00000000000000000000000000000101 $
b00000000000000000000000000000101 %
b00000000000000000000000000001010 '
b0110011 (
b000 -
b00 .
b00 1
b00000000001100010000001000110011 2
b00000000000000000000000000000100 3
b00000000000000000000000000100000 4
b00000000000000010000100000011110 5
b00000000001100010000000000000000 6
b00000000000000000000000000000011 7
b00010 :
b00011 ;
b00100 <
b00000000000000000000000000001010 =
b00000000000000000000000000000101 >
b00000000000000000000000000000101 ?
b00000000000000000000000000100000 @
b00000000000000000000000000001000 A
b00000010 B
1D
0I
b000000000100 L
b0000000000100 M
b000010000100000000010 N
b00000000000000000000000000001000 O
b0000000010 P
b00000000000000000000000000011100 Q
b0000000111 R
b00000000000000000000000000100000 S
b00000000000000000000000000001100 U
1t
b00000000000000000000000000001010 v
#6
0t
#7
b11111 #
b00000000000000000000000000100100 $
b00000000000000000000000000000000 %
b00000000000000000000000000100100 '
b1100111 (
b011 -
b10 .
b11 1
b00000000000000001000000001100111 2
b00000000000000000000000000000000 3
b00000000000000001000000000100000 5
b00000000000000001000000000000000 6
b00000000000000000000000000000000 7
b00001 :
b00000 ;
b00000 <
b00000000000000000000000000100100 =
b00000000000000000000000000001100 >
b00000000000000000000000000000000 ?
b00000000000000000000000000001100 @
b00000000000000000000000000001100 A
b00001001 B
0D
1J
b000000000000 L
b0000000000000 M
b000001000000000000000 N
b00000000000000000000000000001100 O
b0000001001 P
b00000000000000000000000000100000 Q
b0000001000 R
b00000000000000000000000000100100 S
b00000000000000000000000000001010 X
1t
b00000000000000000000000000100100 v
#8
0t
#9
b00000 #
b00000000000000000000000000001010 $
b00000000000000000000000000000001 %
b00000000000000000000000000001011 '
b0010011 (
b001 -
b00 .
1/
b00 1
b00000000000100100000001010010011 2
b00000000000000000000000000000101 3
b00000000000000000000100000010000 4
b00000000000000100000100000001100 5
b00000000000100100000000000000000 6
b00000000000000000000000000000001 7
b00100 :
b00001 ;
b00101 <
b00000000000000000000000000001011 =
b00000000000000000000000000001010 >
b00000000000000000000000000001100 ?
b00000000000000000000000000010000 @
b00000000000000000000000000001010 A
b00000010 B
1H
0J
b000000000101 L
b0100000000100 M
b000100000100000000000 N
b00000000000000000000000000001011 O
b0000000010 P
b00000000000000000000000000001100 Q
b0000000011 R
b00000000000000000000000000010000 S
1t
b00000000000000000000000000001011 v
#10
0t
0u
#11
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 '
b0100011 (
1)
0,
b101 -
b10 0
b00000000010100000010000000100011 2
b00000000000000000000000000000000 3
b00000000000000000000000000010000 4
b00000000000000000010100000010100 5
b00000000010100000010000000000000 6
b00000000000000000000000000000101 7
b010 8
b00000 :
b00101 ;
b00000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000001011 ?
b00000000000000000000000000010100 @
b00000000000000000000000000000100 A
b00000000 B
1F
0H
b000000000000 L
b0000000000000 M
b000000010100000000100 N
b00000000000000000000000000000101 O
b0000000000 P
b00000000000000000000000000010000 Q
b0000000100 R
b00000000000000000000000000010100 S
b00000000000000000000000000001011 Y
1t
b00000000000000000000000000000000 v
#12
0t
#13
b0000011 (
0)
1+
1,
b100 -
b00 0
b00000000000000000010001100000011 2
b00000000000000000000000000000110 3
b00000000000000000000000000011010 4
b00000000000000000010000000010100 5
b00000000000000000010000000000000 6
b00000000000000000000000000000000 7
b00000 ;
b00110 <
b00000000000000000000000000001011 =
b00000000000000000000000000000000 ?
b00000000000000000000000000011000 @
b00000000000000000000000000000000 A
b00000000000000000000000000001011 C
1E
0F
b000000000110 L
b0000000000110 M
b000000010000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000010100 Q
b0000000101 R
b00000000000000000000000000011000 S
1t
b00000000000000000000000000001011 v
#14
0t
#15
b10000 #
b00000000000000000000000000001011 $
b00000000000000000000000000001011 %
1&
b00000000000000000000000000000001 '
b1100011 (
1*
0+
0,
b010 -
0/
b01 1
b00000000011000101000011001100011 2
b00000000000000000000000000001100 3
b00000000000000000000000000100100 4
b00000000000000101000000000011110 5
b00000000011000101000000000000000 6
b00000000000000000000000000000110 7
b000 8
b00101 :
b00110 ;
b01100 <
b00000000000000000000000000000001 =
b00000000000000000000000000001011 >
b00000000000000000000000000001011 ?
b00000000000000000000000000100100 @
b00000000000000000000000000010000 A
0E
1G
b000000001100 L
b0000000001100 M
b000101000000000000110 N
b00000000000000000000000000010001 O
b00000000000000000000000000011000 Q
b0000000110 R
b00000000000000000000000000011100 S
b00000000000000000000000000001011 Z
1t
b00000000000000000000000000000001 v
#16
0t
#17
b00000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
0&
b00000000000000000000000000000000 '
b0000000 (
0*
b111 -
b00 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000100100 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000 :
b00000 ;
b00000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000101000 @
b00000000000000000000000000000000 A
0G
b000000000000 L
b0000000000000 M
b000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000100100 Q
b0000001001 R
b00000000000000000000000000101000 S
1t
b00000000000000000000000000000000 v
#18
0t
#19
b00000000000000000000000000101000 4
b00000000000000000000000000101000 5
b00000000000000000000000000101100 @
b00000000000000000000000000101000 Q
b0000001010 R
b00000000000000000000000000101100 S
1t
#20
0t
#21
b00000000000000000000000000101100 4
b00000000000000000000000000101100 5
b00000000000000000000000000110000 @
b00000000000000000000000000101100 Q
b0000001011 R
b00000000000000000000000000110000 S
1t
